'''
Full problem description at http://rosalind.info/problems/orf/

Given: A DNA string s of length at most 1 kbp in FASTA format.
Return: Every distinct candidate protein string that can be translated from ORFs of s. Strings can be returned in any order.
'''

CODON = {'UUU' : 'F','CUU' : 'L','AUU' : 'I','GUU' : 'V','UUC' : 'F','CUC' : 'L','AUC' : 'I','GUC' : 'V','UUA' : 'L','CUA' : 'L','AUA' : 'I','GUA' : 'V','UUG' : 'L','CUG' : 'L','AUG' : 'M','GUG' : 'V','UCU' : 'S','CCU' : 'P','ACU' : 'T','GCU' : 'A','UCC' : 'S','CCC' : 'P','ACC' : 'T','GCC' : 'A','UCA' : 'S','CCA' : 'P','ACA' : 'T','GCA' : 'A','UCG' : 'S','CCG' : 'P','ACG' : 'T','GCG' : 'A','UAU' : 'Y','CAU' : 'H','AAU' : 'N','GAU' : 'D','UAC' : 'Y','CAC' : 'H','AAC' : 'N','GAC' : 'D','UAA' : ' ','CAA' : 'Q','AAA' : 'K','GAA' : 'E','UAG' : ' ','CAG' : 'Q','AAG' : 'K','GAG' : 'E','UGU' : 'C','CGU' : 'R','AGU' : 'S','GGU' : 'G','UGC' : 'C','CGC' : 'R','AGC' : 'S','GGC' : 'G','UGA' : ' ','CGA' : 'R','AGA' : 'R','GGA' : 'G','UGG' : 'W','CGG' : 'R','AGG' : 'R','GGG' : 'G'}
COMP  = {'A':'T', 'C':'G', 'G':'C', 'T':'A'}

def Fasta(code):
  #extract sequence data from input file
  #return dict with sequence ids as keys for respective sequence data
    def separate(F):
        temp = F.split('\n')
        return temp[0], ''.join(temp[1:])
    file = open('rosalind_'+code+'.txt', 'r')
    text = dict([separate(x) for x in file.read().split('>') if x!=''])
    file.close()
 
    return text

def orf_prots():
  #using Fasta function, extract sequence data from input file
  #list all possible reading frames (forward and reverse) for the sequence
  #convert resulting 6 sequences into rna by replacing T with U
    temp = Fasta('orf')
    dna = list(temp.values())[0]
    dna_c = ''.join([COMP[dna[i]] for i in range(len(dna)-1,-1,-1)])
    dna_rf = [seq[i:] for i in range(3) for seq in [dna,dna_c]]
    rna_rf = [''.join([x if x!='T' else 'U' for x in dna]) for dna in dna_rf]

    proteins = []

  #translate rna into amino acids 
  #separate into amino acid strings found preceding a stop
  #for each resulting protein string, add all valid protein substrings beginning with start ('M') to final proteins list
    for orf in rna_rf:
        trans = ''.join([CODON[orf[i:i+3]] if len(orf[i:i+3]) == 3 else '' for i in range(ind,len(orf), 3)])
        stop_end = trans[-1] == ' '
        trans = trans.split(' ')
        if not stop_end:
          #no stop codon at end of protein string; last substring doesn't precede stop codon
            trans = trans[:-1]    
        proteins += [a[i:] for a in trans for i in range(len(a)) if a[i]== 'M' ]
  
  #write all valid protein strings found to output file  
    file = open('rosalind_orf_out.txt', 'w')
    for p in set(proteins):
        file.write(p)
        file.write('\n')
    file.write('')
    file.close()
    return
